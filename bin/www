#!/usr/bin/env node

/*
*  Dependencias necesario
*/

// Archivo app.js que tiene la configuración de la aplicación
const app = require('../app');

// Interfaz http que Node.Js usa para correr
const http = require('http');

// Configuración de MongoDB y puerto por defecto
const dbConfig = require('../config/database.config');

// Modulo de Mongoose
const mongoose = require('mongoose');

/*
*  Obtener puerto desde el ambiente y guaradlo en Express (si esta disponible)
*  si no es el caso, se le asigna un puerto por defecto
*/
const port = normalizePort(process.env.PORT || dbConfig.appPort);

// Se asigna el puerto en la applcación
app.set('port', port);

/*
*  Sea crea el servidor HTTP con la configuración de app.js
*/
const server = http.createServer(app);

/*
*  Creamos la configuración inicial para que inicializar moogoose
*  le pasamos el el string de conexión y una opción para usar un
*  parser de conexión (Mongo v3.1.0+)
*/
mongoose.connect(dbConfig.url, {
  useNewUrlParser: true
})
  // Si la conexión fue existosa se ejecuta este bloque
  .then(() => {

    // Inicializamos el servidor para que escuche en el puerto asignado
    server.listen(port);
  })
  // Si la conexión fue erronea se ejecuta este bloque
  .catch((error) => {
    console.log('www error catch on mongo', error);
  });

  // Agregando evento 'error' y la función que lo manejara
server.on('error', onError);

// Agregando evento 'listening' y la función que lo manejara
server.on('listening', onListening);

/*
*  Normalizando el puerto en un número, string, o un false.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
*  Listener para manejar el evento HTTP server "error".
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Manejar error especificos con mensajes más especificos
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requiere permisos elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' ya está en uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
*  Listener para manejar el evento HTTP server "listening".
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Escuchando en ' + bind);
}
